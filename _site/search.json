[
  {
    "objectID": "posts/blog_1/index.html",
    "href": "posts/blog_1/index.html",
    "title": "Can the tSNE results be reproducible?",
    "section": "",
    "text": "If you are an R user struggling to access HARPS GTO sample dataset and have the question that Can‚Äôt we reproduce the t-distributed stochastic neighbor embedding (tSNE) results that already exist? In their mind, this blog is for you. Today, I will introduce my workflow of accessing processed data from original data, downloading the processed data, and data processing to initialize cluster labels and show my surprising findings on reproducing tSNE results.\nThis example is relevant to the paper, ‚ÄúDissecting stellar chemical abundance space with t-SNE‚Äù (Anders et al.¬†2018, Astronomy & Astrophysics 619, A125).\nFor simplicity, I added all the codes separately and linked them through the process.\nPlease note that you will need to \\(\\color{green}{\\text{install python library}}\\) called open_data, which you can find in open_data.py as the initial step."
  },
  {
    "objectID": "posts/blog_1/index.html#data-processing-steps-already-followed-by-open_data-library",
    "href": "posts/blog_1/index.html#data-processing-steps-already-followed-by-open_data-library",
    "title": "Can the tSNE results be reproducible?",
    "section": "Data processing steps already followed by open_data library",
    "text": "Data processing steps already followed by open_data library\nThe original data can be found in the GitHub repository of the authors as DelgadoMena2017.fits, which includes some existing cluster labels and abundance determination for \\(\\color{blue}{\\text{Mg, Al, Si, Ca, TiI, Fe, Cu, Zn, Sr, Y, ZrII, Ce, and Ba}}\\). This file contains details regarding \\(\\color{red}{\\text{1059}}\\) stars.\nThen, how do we get only \\(\\color{red}{\\text{530}}\\) stars? ü§î\nLet‚Äôs investigate‚Ä¶\nAccording to the authors, the sample needed to be analyzed in a more restricted temperature range to obtain reliable tSNE abundance maps. The reason is that specific abundance trends dominate underlying temperature trends. Therefore,\n\nchoose an effective temperature range of \\(\\color{brown}{5300 \\text{ K} < T_{eff} < 6000 \\text{ K}}\\).\n\nOnly \\(\\color{green}{539}\\) stars were satisfied in this step. Next,\n\nexclude stars with \\(\\color{brown}{\\text{log } g_{HIP}} < 3\\) which remove \\(\\color{green}{\\text{one}}\\) star.\n\nThen,\n\nselect successful abundance determination for \\(\\color{brown}{\\text{Mg, Al, Si, Ca, TiI, Fe, Cu, Zn, Sr, Y, ZrII, Ce, and Ba}}\\) which use as input for tSNE.\n\nOnly \\(\\color{green}{533}\\) stars have remained because others contain missing values. Furthermore,\n\nto compensate for the fact that tSNE does not take into account individual (heteroscedastic) uncertainties in the data, the authors followed the approach of Hogg et al.¬†(2016) and rescaled each abundance by the median uncertainty in that element, assuming an abundance uncertainty floor of 0.03 dex. Additionally,\nremove stars that did not converge by using the age determination code, StarHose code.\n\nThe \\(\\color{green}{3}\\) stars are discarded.\nThere are only \\(\\color{green}{530}\\) stars in our final sample. üëè\nNote: You do not need to consider the above steps because the open_data package has already done it for us."
  },
  {
    "objectID": "posts/blog_1/index.html#our-workflow",
    "href": "posts/blog_1/index.html#our-workflow",
    "title": "Can the tSNE results be reproducible?",
    "section": "Our workflow",
    "text": "Our workflow\nLet‚Äôs begin‚Ä¶ ü§ì\n\nTo download the processed data as a CSV file and save it locally, you need to run download_original.py,\nRun this code to process data further as indicated in the original paper to compute missing variables, new variables, cluster labels and produce plots of authors t-SNE results,\nRun this code to conduct our own t-SNE results.\n\nHere, I used the \\(\\color{red}{\\text{Perplexity parameter as 40}}\\) authors already mentioned that in the paper.\nHere is the output..ü§ó"
  },
  {
    "objectID": "posts/blog_1/index.html#acknowledge",
    "href": "posts/blog_1/index.html#acknowledge",
    "title": "Can the tSNE results be reproducible?",
    "section": "Acknowledge",
    "text": "Acknowledge\nI am grateful for Prof.¬†Dianne Cook who suggested me as an exercise for me."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Team",
    "section": "",
    "text": "I am a first year PhD student in Department of Econometrics and Business Statistics at the Monash University, Australia. This website contains the findings of my PhD research project.\nMy supervisors are:\n\nProfessor Dianne Cook\nDr.¬†Michael Lydeamore\nDr.¬†Paul Harrison\nDr.¬†Thiyanga S. Talagala"
  },
  {
    "objectID": "Blogs.html",
    "href": "Blogs.html",
    "title": "Posts",
    "section": "",
    "text": "Is there any difference between dimension reductions in \\(2-d\\) and \\(3-d\\)?\n\n\n\n\n\n\n\ntSNE\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2023\n\n\n\n\n\n\n\n\nHow do we set up a Python virtual environment in the R shinyapps.io server?\n\n\n\n\n\n\n\nTechnichal\n\n\n\n\n\n\n\n\n\n\n\nFeb 9, 2023\n\n\n\n\n\n\n\n\nCan the tSNE results be reproducible?\n\n\n\n\n\n\n\ntSNE\n\n\n\n\n\n\n\n\n\n\n\nFeb 5, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/blog_2/index.html",
    "href": "posts/blog_2/index.html",
    "title": "How do we set up a Python virtual environment in the R shinyapps.io server?",
    "section": "",
    "text": "Today, I will introduce what are the initial steps that you need to follow when setting up a Python virtual environment in R for the shinyapps.io server.\nNote: You need to have an account in shinyapps.io server. The page can be found in here.\nFirst, you need to create a ‚Äò.Rprofile‚Äô file within the directory of your shiny app. Then, initialize a suitable name for the \\(\\color{red}{\\text{Python virtual environment}}\\).\n\nVIRTUALENV_NAME = \"new_env\"\n\nAfter that, we need to set environment variables in the ‚Äò.Rprofile‚Äô file as follows.\n\nSys.setenv(PYTHON_PATH = 'python3')\n# Installs into default shiny virtualenvs dir\nSys.setenv(VIRTUALENV_NAME = VIRTUALENV_NAME) \nSys.setenv(RETICULATE_PYTHON = paste0('/home/shiny/.virtualenvs/', \n                                      VIRTUALENV_NAME, '/bin/python'))\n\nThe next step is to create the \\(\\color{red}{\\text{Python virtual environment}}\\). To do that, you can write the following code chunks in server.R or your shiny app script.\nIn there, first of all, you need to get the environment variables.\n\nvirtualenv_dir = Sys.getenv(\"VIRTUALENV_NAME\")\npython_path = Sys.getenv(\"PYTHON_PATH\")\n\nNext, create a Python virtual environment by specifying the Python path.\n\nreticulate::virtualenv_create(virtualenv_dir, python = python_path)\n\nThen, you have to install Python dependencies. To do this, you can install the packages by directly specifying them.\n\nreticulate::virtualenv_install(virtualenv_dir, packages = c(\"pandas==1.3.5\")) \n\nIf not, can use requirement.txt which contains all the packages.\n\nreticulate::virtualenv_install(virtualenv_dir, c(\"-r\", \"requirements.txt\"))\n\nFinally, define the Python virtual environment to be used by reticulate.\n\nreticulate::use_virtualenv(virtualenv_dir, required = TRUE)\n\nDone‚Ä¶üëè"
  },
  {
    "objectID": "Learning.html",
    "href": "Learning.html",
    "title": "Introduction to topics",
    "section": "",
    "text": "Local vs global structure\n\n\n\n\n\n\n\nBasics\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "learning/learning_1/index.html",
    "href": "learning/learning_1/index.html",
    "title": "Local vs global structure",
    "section": "",
    "text": "library(Rtsne)\nlibrary(umap)\nlibrary(phateR)\n\nWarning: package 'phateR' was built under R version 4.2.2\n\n\nLoading required package: Matrix\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(langevitour)\nlibrary(reticulate)\nlibrary(ggplot2)\nuse_python(\"~/miniforge3/envs/pcamp_env/bin/python\")\nuse_condaenv(\"pcamp_env\")"
  },
  {
    "objectID": "learning/learning_1/index.html#references",
    "href": "learning/learning_1/index.html#references",
    "title": "Local vs global structure",
    "section": "References",
    "text": "References\nhttps://scikit-learn.org/stable/auto_examples/manifold/plot_compare_methods.html#sphx-glr-auto-examples-manifold-plot-compare-methods-py"
  },
  {
    "objectID": "posts/blog_3/index.html",
    "href": "posts/blog_3/index.html",
    "title": "Is there any difference between dimension reductions in \\(2-d\\) and \\(3-d\\)?",
    "section": "",
    "text": "Generally, we reduce the dimensions to 2-d and see the visualization. But you also can try to reduce to \\(3-d\\) as well.\nThe main issue you would in mind is that can it preserve the same structure as in \\(2-d\\).\nLet‚Äôs look an example‚Ä¶\n\nrandom_num1 <- runif(1, min = 1, max = 10000000)\nset.seed(random_num1)\nu <- runif(1000, min = 10, max = 30)\nv <- runif(1000, min = 10, max = 20)\nx <- u + v - 10\ny <- v - u + 8\nz <- rep(0, 1000) + runif(1000, 0, 1)\nw <- rep(0, 1000) - runif(1000, 0, 1)\n\ndf_2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w) \n\n\nN <- dim(df_2)[1]\nopt_perplexity <- sqrt(N)\n\ntSNE_fit <- df_2 %>%\n    select(where(is.numeric)) %>%\n    Rtsne(perplexity = opt_perplexity, pca = FALSE, pca_center = FALSE, normalize = FALSE, dims = 2)\n\ntSNE_df <- tSNE_fit$Y %>%\n  as.data.frame()  %>%\n  mutate(ID=row_number())\n\nnames(tSNE_df)[1:(ncol(tSNE_df)-1)] <- paste0(rep(\"tSNE\",(ncol(tSNE_df)-1)), 1:(ncol(tSNE_df)-1))\n\ntSNE_df_plot <- tSNE_df %>%\n    ggplot(aes(x = tSNE1,\n               y = tSNE2))+\n    geom_point() +\n    coord_equal()\n\ntSNE_df_plot\n\n\n\n\n\ntSNE_fit1 <- df_2 %>%\n    select(where(is.numeric)) %>%\n    Rtsne(perplexity = opt_perplexity, pca = FALSE, pca_center = FALSE, normalize = FALSE, dims = 3)\n\ntSNE_df1 <- tSNE_fit1$Y %>%\n  as.data.frame()  %>%\n  mutate(ID=row_number())\n\nnames(tSNE_df1)[1:(ncol(tSNE_df1)-1)] <- paste0(rep(\"tSNE\",(ncol(tSNE_df1)-1)), 1:(ncol(tSNE_df1)-1))\n\nlangevitour(tSNE_df1 %>% select(-ID))"
  }
]